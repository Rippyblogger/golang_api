name: Deploy to Production

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
    types:
      - closed
  workflow_dispatch:

concurrency:
  group: app-deployment
  cancel-in-progress: false
permissions:
  id-token: write
  contents: read

jobs:
  build_and_push:
    runs-on: ubuntu-latest
    outputs:
      registry: ${{ steps.login-ecr.outputs.registry }}
      repository: ${{ steps.set-repository.outputs.repository }}
      image_tag: ${{ github.sha }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Configure AWS Credentials for regional audience
        uses: aws-actions/configure-aws-credentials@v4.1.0
        with:
          audience: sts.amazonaws.com
          aws-region: ${{vars.AWS_REGION}}
          role-to-assume: arn:aws:iam::${{vars.ACCOUNT_ID}}:role/${{vars.AWS_ROLE_NAME}}

      - name: Confirm access
        run: aws sts get-caller-identity

      - name: Log in to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Set lowercase repository name
        id: set-repository
        run: |
          repository=$(basename '${{ github.repository }}' | tr '[:upper:]' '[:lower:]')
          echo "REPOSITORY=$repository" >> $GITHUB_ENV
          echo "repository=$repository" >> "$GITHUB_OUTPUT"

      - name: Build, tag, and push docker image to Amazon ECR
        env:
          REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          REPOSITORY: ${{ env.REPOSITORY }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          docker build -t $REGISTRY/$REPOSITORY:$IMAGE_TAG .

          docker tag $REGISTRY/$REPOSITORY:$IMAGE_TAG $REGISTRY/$REPOSITORY:latest

          docker push $REGISTRY/$REPOSITORY:$IMAGE_TAG
          docker push $REGISTRY/$REPOSITORY:latest

      - name: Set image URI output
        id: set-image-uri
        env:
          REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          REPOSITORY: ${{ env.REPOSITORY }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          echo "Built image: $REGISTRY/$REPOSITORY:$IMAGE_TAG"

  terraform_deploy:
    name: Deploy to EKS via Terraform
    runs-on: ubuntu-latest
    needs: build_and_push

    env:
      TF_VAR_image_name: ${{ needs.build_and_push.outputs.registry }}/${{ needs.build_and_push.outputs.repository }}:${{ needs.build_and_push.outputs.image_tag }}

    defaults:
      run:
        working-directory: ./terraform

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials using OIDC
        uses: aws-actions/configure-aws-credentials@v4.1.0
        with:
          role-to-assume: arn:aws:iam::${{ vars.ACCOUNT_ID }}:role/${{ vars.AWS_ROLE_NAME }}
          aws-region: ${{ vars.AWS_REGION }}
          audience: sts.amazonaws.com

      - name: Mask sensitive values
        run: |
          echo "::add-mask::${{ vars.ACCOUNT_ID }}"

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.12.0
      - name: Terraform Init
        run: |
          terraform init -input=false

      - name: Terraform Plan
        run: |
          sleep 20s
          terraform plan -input=false
      - name: Terraform Apply
        run: |
          echo "$TF_VAR_image_name"
          terraform apply -auto-approve -input=false

      - name: Get Load Balancer URL
        id: get-lb-url
        run: |
          # Wait for load balancer to be ready
          echo "⏳ Waiting for load balancer to be provisioned..."
          sleep 60s

          # Get cluster name from terraform output
          CLUSTER_NAME=$(terraform output -raw cluster_name 2>/dev/null || echo "")

          # If terraform output doesn't work, try to get it from the state
          if [ -z "$CLUSTER_NAME" ]; then
            CLUSTER_NAME=$(aws eks list-clusters --query 'clusters[0]' --output text)
          fi

          # Update kubeconfig
          aws eks update-kubeconfig --region ${{ vars.AWS_REGION }} --name $CLUSTER_NAME

          # Get load balancer URL with retries
          MAX_ATTEMPTS=10
          ATTEMPT=1

          while [ $ATTEMPT -le $MAX_ATTEMPTS ]; do
            echo "🔍 Attempt $ATTEMPT: Getting load balancer URL..."
            
            LB_URL=$(kubectl get service go-api-deployment-svc -o jsonpath='{.status.loadBalancer.ingress[0].hostname}' 2>/dev/null || echo "")
            
            if [ -n "$LB_URL" ] && [ "$LB_URL" != "" ]; then
              echo "Load balancer URL found: http://$LB_URL"
              echo "lb_url=http://$LB_URL" >> $GITHUB_OUTPUT
              break
            else
              echo "Load balancer not ready yet, waiting 30 seconds..."
              sleep 30
              ATTEMPT=$((ATTEMPT + 1))
            fi
          done

          if [ $ATTEMPT -gt $MAX_ATTEMPTS ]; then
            echo "❌ Failed to get load balancer URL after $MAX_ATTEMPTS attempts"
            echo "🔍 Service status:"
            kubectl describe service go-api-deployment-svc
            echo "lb_url=Load balancer URL not available yet - check AWS console" >> $GITHUB_OUTPUT
          fi

      - name: Display Deployment Information
        run: |
          echo "🚀 Deployment completed successfully!"
          echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
          echo "SUMMARY"
          echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
          echo "🐳 Docker Image: ${{ env.TF_VAR_image_name }}"
          echo "🌐 Load Balancer URL: ${{ steps.get-lb-url.outputs.lb_url }}"
          echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
          echo ""
          echo "🔗 You can access the Golang API at:"
          echo "   ${{ steps.get-lb-url.outputs.lb_url }}"
          echo ""
          echo "Available endpoints:"
          echo "   • GET  ${{ steps.get-lb-url.outputs.lb_url }}/health"
          echo "   • GET  ${{ steps.get-lb-url.outputs.lb_url }}/vpcs"
          echo "   • GET  ${{ steps.get-lb-url.outputs.lb_url }}/ec2s"
          echo "   • GET  ${{ steps.get-lb-url.outputs.lb_url }}/eks"
          echo "   • GET  ${{ steps.get-lb-url.outputs.lb_url }}/quotas"
          echo "   • POST ${{ steps.get-lb-url.outputs.lb_url }}/quota"
          echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
