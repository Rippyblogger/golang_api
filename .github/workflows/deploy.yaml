name: Deploy to Production

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
    types:
      - closed
  workflow_dispatch:

concurrency:
  group: app-deployment
  cancel-in-progress: false      
permissions:
  id-token: write
  contents: read

jobs:
  build_and_push:
    runs-on: ubuntu-latest
    outputs:
      image_uri: ${{ steps.set-image-uri.outputs.image_uri }}


    steps:

      - name: Checkout code
        uses: actions/checkout@v4
      - name: Configure AWS Credentials for regional audience
        uses: aws-actions/configure-aws-credentials@v4.1.0
        with:
          audience: sts.amazonaws.com
          aws-region: ${{vars.AWS_REGION}}
          role-to-assume: arn:aws:iam::${{secrets.ACCOUNT_ID}}:role/${{vars.AWS_ROLE_NAME}}

      - name: Confirm access
        run: aws sts get-caller-identity

      - name: Log in to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Set lowercase repository name
        run: echo "REPOSITORY=$(basename '${{ github.repository }}' | tr '[:upper:]' '[:lower:]')" >> $GITHUB_ENV

      - name: Build, tag, and push docker image to Amazon ECR
        env:
          REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          REPOSITORY: ${{ env.REPOSITORY }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          
          docker build -t $REGISTRY/$REPOSITORY:$IMAGE_TAG .

          docker tag $REGISTRY/$REPOSITORY:$IMAGE_TAG $REGISTRY/$REPOSITORY:latest

          docker push $REGISTRY/$REPOSITORY:$IMAGE_TAG
          docker push $REGISTRY/$REPOSITORY:latest

      # - name: Set image URI as environment variable for Terraform
      #   run: echo "TF_VAR_image_name=${{ steps.login-ecr.outputs.registry }}/$REPOSITORY:${{ github.sha }}" >> $GITHUB_ENV
      
      - name: Set image URI output
        id: set-image-uri
        env:
          REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          REPOSITORY: ${{ env.REPOSITORY }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          image_uri="$REGISTRY/$REPOSITORY:$IMAGE_TAG"
          echo "image_uri=$image_uri" >> "$GITHUB_OUTPUT"
          echo "Built image: $image_uri"

  terraform_deploy:
    name: Deploy to EKS via Terraform
    runs-on: ubuntu-latest
    needs: build_and_push
    env:
      TF_VAR_image_name: ${{ needs.build_and_push.outputs.image_uri }}


    defaults:
      run:
        working-directory: ./terraform

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Debug environment variables
        run: |
          echo "=== DEBUG INFO ==="
          echo "TF_VAR_image_name: '$TF_VAR_image_name'"
          echo "Build output image_uri: '${{ needs.build_and_push.outputs.image_uri }}'"
          echo "Length of TF_VAR_image_name: ${#TF_VAR_image_name}"
          echo "=================="
          
          if [ -z "$TF_VAR_image_name" ]; then
            echo "ERROR: TF_VAR_image_name is empty!"
            echo "This will cause Terraform to fail"
            exit 1
          fi

      - name: Configure AWS credentials using OIDC
        uses: aws-actions/configure-aws-credentials@v4.1.0
        with:
          role-to-assume: arn:aws:iam::${{ secrets.ACCOUNT_ID }}:role/${{ vars.AWS_ROLE_NAME }}
          aws-region: ${{ vars.AWS_REGION }}
          audience: sts.amazonaws.com

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.12.0
      - name: Terraform Init
        run: |
          terraform init -input=false

      - name: Terraform Plan
        run: |
          sleep 20s
          terraform plan -input=false
      - name: Terraform Apply
        run: |
          terraform apply -auto-approve -input=false